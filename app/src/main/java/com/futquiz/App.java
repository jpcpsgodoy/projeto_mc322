/*
 * This source file was generated by the Gradle 'init' task
 */
package com.futquiz;

import java.util.List;
import java.util.Scanner;
import com.futquiz.auxiliares.*;
import com.futquiz.exceptions.NaoFoiPossivelCarregarArquivoException;
import com.futquiz.model.*;

public class App {
    public static void main(String[] args) throws NaoFoiPossivelCarregarArquivoException {
        List<Quarterback> quarterbacks = leitorDeCSV.carregarDados("/dados.csv");

        Scanner scanner = new Scanner(System.in);

        System.out.println("Escolha a meta (2000, 3500, 5000): ");
        int meta = Integer.parseInt(scanner.nextLine());

        System.out.println("Escolha o modo (1 = Touchdowns passados, 2 = Touchdowns totais: ");
        int modoEscolhido = Integer.parseInt(scanner.nextLine());
        ModoPontuacao modo = (modoEscolhido == 1) ? ModoPontuacao.TD_PASSE : ModoPontuacao.TD_TOTAL;

        Rodada rodada;

        System.out.println("Escolha o modo de exibição (1 = Normal, 2 = Desafio)");
        int modoEstatisticas = Integer.parseInt(scanner.nextLine());
        if (modoEstatisticas == 1) {
            rodada = new RodadaNormal(meta, modo);
        } else {
            rodada = new RodadaDesafio(meta, modo);
        }

        rodada.iniciarRodada();
        System.out.println("Rodada iniciada com meta ajustada: " + rodada.getMeta());

        while (!rodada.getMultiplicadores().isEmpty()) {
            Quarterback qb = rodada.sortearQuarterback(quarterbacks);
            rodada.registrarQuarterbackUsado(qb);

            System.out.println("QB sorteado: " + qb.getNome());
            if (rodada.getExibeEstatisticas()) {
                System.out.println("TDs: " + rodada.getPontuacaoQB(qb));
            }

            System.out.println("Escolha um multiplicador: ");
            for (int i = 0; i < rodada.getMultiplicadores().size(); i++) {
                System.out.print(rodada.getMultiplicadores().get(i).getValor() + " ");
            }
            System.out.println();

            int fatorEscolhido = Integer.parseInt(scanner.nextLine());
            Multiplicador escolhido = null;
            for (Multiplicador m : rodada.getMultiplicadores()) {
                if (m.getValor() == fatorEscolhido) {
                    escolhido = m;
                    break;
                }
            }

            if (escolhido != null) {
                int pontos = escolhido.aplicar(rodada.getPontuacaoQB(qb));
                rodada.adicionarPontos(pontos);
                rodada.getMultiplicadores().remove(escolhido);
                System.out.println("Pontos ganhos: " + pontos);
                System.out.println("Pontos acumulados: " + rodada.getPontosAcumulados());
            } else {
                System.out.println("Multiplicador inválido!");
            }
        }

        if (rodada.metaAlcancada()) {
            System.out.println("Meta atingida!");
        } else {
            System.out.println("Não foi possível atingir a meta.");
        }

        scanner.close();
    }
}
